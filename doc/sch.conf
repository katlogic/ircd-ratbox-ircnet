/*
 * $Id$
 *
 * service-channels configuration
 *
 * how it works - for each schan {} block defined there are 4 arguments:
 * flags   - umodes normally needed to receive the notice as an oper
 * pattern - pattern to match against, the case is ignored.
 *		* match everything until the rest of the pattern is found
 *		? matches single char
 *		@ matches a-zA-Z letter, 
 *		# matches a number
 * optional arguments:
 * pass     - processing will not stop after succesfuly matching this rule
 *	      (useful if you want to send the same stuff to more places)
 * topic    - its obvious, the last one will be set. works only for &channels
 * operonly - will set the channel +i and opers are allowed to join automagically.
 *	      works only for local &channels.
 *
 * blocks are processed in the order as they're seen in the config.
 *
 * people joining schans will never get ops.
 * &chans are set +mtna, anonymous flag means you wont see others in the channel.
 *
 * note that you're free to use #channel or !channels (with long name) as well.
 * using masked names is recommended (like #sharedmsg:*.cz).
 *
 * however server will not change any modes or topic for it. if choose to do so,
 * make sure you use it only for narrowly selected messages, especially NOT
 * these generated by send.c, as under certain conditions it could create heavy
 * looping storms.
 *
 */

/*
 * IRC2.11-like configuration follows, the messages won't be exact to the
 * letter, but the most commonly observed stuff should be there.
 * (see &catchall if you'll be missing something)
 */

/* if you don't want to participate in server uptime contest, remove this :) */
schan "#suptime" { flags = servnotice; pattern = "* was connected for * seconds. * send/recv."; pass = yes; };
schan "#suptime" { flags = servnotice; pattern = "End of burst from *"; pass = yes; };

/* you like spying on people connecting, don't you? :) */

schan "&local" { topic = "SERVER MESSAGES: clients activity"; operonly = yes; flags = full; pattern = "All connections in use.*"; };
schan "&local" { flags = full; pattern = "Too many*"; };
schan "&local" { flags = servnotice; pattern = "* spoofing: * as *"; };

/* we don't really have an auth slave but let's place dns worker messages here */

schan "&auth" { topic = "SERVER MESSAGES: messages from the authentication slave"; flags = servnotice; pattern = "Unable to*"; };
schan "&auth" { flags = servnotice; pattern = "resolver*"; };

schan "&services" { topic = "SERVER MESSAGES: services joining and leaving"; flags = servnotice; pattern = "Received SERVICE*"; };

schan "&kills" { topic = "SERVER MESSAGES: operator and server kills"; flags = servnotice; pattern = "Received KILL*"; };

schan "&save" { topic = "SERVER MESSAGES: save messages"; flags = skill; pattern = "Received SAVE*"; };

schan "&errors" { topic = "SERVER MESSAGES: server errors"; flags = full; pattern = "*"; };

schan "&numerics" { topic = "SERVER MESSAGES: numerics received"; flags = servnotice; pattern = "\*\*\**numeric to me:*"; };

schan "&channel" { topic = "SERVER MESSAGES: fake modes"; flags = servnotice; pattern = "\*\*\** Long channel*"; };

schan "&notices" { topic = "SERVER MESSAGES: warnings and notices"; flags = debug; pattern = "Message*for*"; };
schan "&notices" { flags = servnotice; pattern = "Dropping server*"; };
schan "&notices" { flags = debug; pattern = "Unknown prefix*"; };

/* a lot of notices are considered "errors" in 2.11 */

schan "&errors" { flags = servnotice; pattern = "Unauthorised server*"; };
schan "&errors" { flags = servnotice; pattern = "Link*introduced leafed*"; };
schan "&errors" { flags = servnotice; pattern = "Non-Hub*"; };
schan "&errors" { flags = servnotice; pattern = "Link*dropped*"; };
schan "&errors" { flags = servnotice; pattern = "Link*cancelled*"; };
schan "&errors" { flags = servnotice; pattern = "Attempt*"; };
schan "&errors" { flags = servnotice; pattern = "Invalid*"; };
schan "&errors" { flags = servnotice; pattern = "*requires*"; };
schan "&errors" { flags = servnotice; pattern = "Trying to send*myself!"; };
schan "&errors" { flags = servnotice; pattern = "error*"; };
schan "&errors" { flags = servnotice; pattern = "*, line*"; };

schan "&servers" { topic = "SERVER MESSAGES: servers joining and leaving"; flags = servnotice; pattern = "Received SERVER*"; };
schan "&servers" { flags = servnotice; pattern = "Received SQUIT*"; };

/* catch-alls */

schan "&local" { flags = bots, unauth, rej, cconnext; pattern = "*"; };

schan "&notices" { flags = servnotice; pattern = "*"; };
schan "&notices" { flags = external; pattern = "*"; };

schan "&debug" { topic = "SERVER MESSAGES: debug messages [you shouldn't be here! ;)]"; flags = debug; pattern = "*"; };

schan "&wallops" { topic = "SERVER MESSAGES: wallops received"; flags = wallop; pattern = "*"; };


/* catch-all for other server notices which passed the above */
schan "&catchall" {
	topic = "SERVER MESSAGES: catch-all messages not passed into other &channels [it's noisy!]";
	flags = bots, cconnext, debug, full, skill, locops, nchange, rej, servnotice,
		unauth, wallop, external, spy, operspy, operwall;
	pattern = "*";
	operonly = yes;
};


